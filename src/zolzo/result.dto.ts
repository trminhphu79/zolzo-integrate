import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  IsEnum,
  IsNumber,
  IsObject,
  IsOptional,
  IsString,
  ValidateNested,
  IsArray,
  MaxLength,
} from 'class-validator';
import { Type } from 'class-transformer';
import { ResultCode, ResultStatus, YesNo } from 'src/enums/zolzo.enum';

export class CheckResultRequestDto {
  @ApiProperty({
    description: 'Business transaction ID generated by merchant',
    example: '2017839040588699',
  })
  @IsString()
  @MaxLength(64)
  bizId!: string;

  @ApiProperty({
    description: 'Transaction ID returned from initialize API',
    example: 'G000000005FID20200304000000000001570702',
  })
  @IsString()
  @MaxLength(128)
  transactionId!: string;

  @ApiProperty({
    description: 'Whether to return image data',
    enum: YesNo,
    example: YesNo.Y,
    required: false,
  })
  @IsOptional()
  @IsEnum(YesNo)
  isReturnImage?: YesNo;

  @ApiProperty({
    description: 'Specify additional images to be returned',
    example: ['FACE_EYE_CLOSE', 'DOC_FRONT_ANGLE'],
    required: false,
    type: [String],
  })
  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  extraImageControlList?: string[];

  @ApiProperty({
    description: 'Whether to return five-category spoofing result',
    enum: YesNo,
    example: YesNo.Y,
    required: false,
  })
  @IsOptional()
  @IsEnum(YesNo)
  returnFiveCategorySpoofResult?: YesNo;
}

export class RealIdResultDto {
  @ApiProperty({ enum: ResultCode, example: ResultCode.SUCCESS })
  @IsEnum(ResultCode)
  resultCode!: ResultCode;

  @ApiProperty({ example: 'Success' })
  @IsString()
  resultMessage!: string;

  @ApiProperty({ enum: ResultStatus, example: ResultStatus.S })
  @IsEnum(ResultStatus)
  resultStatus!: ResultStatus;
}

export class ExtBasicInfoDto {
  @ApiProperty({ example: '08530000001' }) @IsString() certType!: string;
  @ApiProperty({ example: 'PASSPORT' }) @IsString() docCategory!: string;
  @ApiProperty({ example: 'A12345678' }) @IsString() certNo!: string;
  @ApiProperty({ example: 'xxxxxx' }) @IsString() certName!: string;
}

export class FaceAttributeDto {
  @ApiProperty({ example: 'false' }) @IsString() occlusionMouthResult!: string;
  @ApiProperty({ example: 'false' })
  @IsString()
  occlusionForeheadResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() occlusionResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() occlusionChinResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() occlusionEyesResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() occlusionNoseResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() occlusionCheekResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() maskResult!: string;
  @ApiProperty({ example: 'true' }) @IsString() glassesResult!: string;
  @ApiProperty({ example: 'false' }) @IsString() hatResult!: string;
}

export class DeviceRiskDto {
  @ApiProperty({ example: 0 }) @IsNumber() riskLevel!: number;
}

export class ExtFaceInfoDto {
  @ApiProperty({ example: 'Success' }) @IsString() ekycResultFace!: string;

  @ApiProperty({ example: 88 }) @IsNumber() faceScore!: number;

  @ApiProperty({
    description: 'base64 image string',
    example: '/9j/4AA..[omitted]..PxA=',
  })
  @IsString()
  faceImg!: string;

  @ApiPropertyOptional({
    description: 'Map of extra face images',
    example: { FACE_EYE_CLOSE: '/9j/4AA..[omitted]..PxA=' },
    type: 'object',
    additionalProperties: { type: 'string' },
  })
  @IsOptional()
  @IsObject()
  extraImages?: Record<string, string>;

  @ApiProperty({ example: 97.61517973846627 }) @IsNumber() faceQuality!: number;

  @ApiProperty({ example: 'Success' }) @IsString() faceLivenessResult!: string;

  @ApiProperty({ example: 34 }) @IsNumber() estimatedAge!: number;

  @ApiProperty({ type: FaceAttributeDto })
  @ValidateNested()
  @Type(() => FaceAttributeDto)
  faceAttribute!: FaceAttributeDto;

  @ApiProperty({ example: 'Success' }) @IsString() deeperFaceResult!: string;

  @ApiProperty({ example: '' })
  @IsString()
  deeperFaceResultDescription!: string;

  @ApiProperty({ type: DeviceRiskDto })
  @ValidateNested()
  @Type(() => DeviceRiskDto)
  deviceRisk!: DeviceRiskDto;
}

export class OcrDetailItemDto {
  @ApiProperty({ example: 'ID_NUMBER' }) @IsString() name!: string;
  @ApiProperty({ example: 'MRZ' }) @IsString() source!: string;
  @ApiProperty({ example: 'xxxx' }) @IsString() value!: string;
}

export class SpoofComponentDto {
  @ApiProperty({ example: 'kadPengenalan' }) @IsString() name!: string;
  @ApiProperty({ example: 'Y' }) @IsString() subResult!: string;
}

export class ExtraSpoofResultDetailDto {
  @ApiProperty({ example: 'landmarkCheck' }) @IsString() name!: string;
  @ApiProperty({ example: 'Y' }) @IsString() result!: string;
  @ApiProperty({ example: 'SECURITY_FEATURE_CHECK' })
  @IsString()
  spoofType!: string;

  @ApiProperty({ type: [SpoofComponentDto] })
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => SpoofComponentDto)
  components!: SpoofComponentDto[];
}

export class SecurityFeaturesResultDto {
  @ApiPropertyOptional({ example: 95 })
  @IsOptional()
  @IsNumber()
  LASER_IMAGE_1_SCORE?: number;
  @ApiPropertyOptional({ example: 90 })
  @IsOptional()
  @IsNumber()
  LASER_IMAGE_1_THRESHOLD?: number;
  @ApiPropertyOptional({ example: 'True' })
  @IsOptional()
  @IsString()
  LASER_IMAGE_1_PASSED?: string;

  @ApiPropertyOptional({ example: 95 })
  @IsOptional()
  @IsNumber()
  HOLOGRAM_SCORE?: number;
  @ApiPropertyOptional({ example: 90 })
  @IsOptional()
  @IsNumber()
  HOLOGRAM_THRESHOLD?: number;
  @ApiPropertyOptional({ example: 'True' })
  @IsOptional()
  @IsString()
  HOLOGRAM_PASSED?: string;

  @ApiPropertyOptional({ example: 95 })
  @IsOptional()
  @IsNumber()
  STEREO_LASER_PORTRAIT_SCORE?: number;
  @ApiPropertyOptional({ example: 90 })
  @IsOptional()
  @IsNumber()
  STEREO_LASER_PORTRAIT_THRESHOLD?: number;
  @ApiPropertyOptional({ example: 'True' })
  @IsOptional()
  @IsString()
  STEREO_LASER_PORTRAIT_PASSED?: string;

  @ApiPropertyOptional({ example: 95 })
  @IsOptional()
  @IsNumber()
  LASER_IMAGE_2_SCORE?: number;
  @ApiPropertyOptional({ example: 90 })
  @IsOptional()
  @IsNumber()
  LASER_IMAGE_2_THRESHOLD?: number;
  @ApiPropertyOptional({ example: 'True' })
  @IsOptional()
  @IsString()
  LASER_IMAGE_2_PASSED?: string;

  @ApiPropertyOptional({ example: 95 })
  @IsOptional()
  @IsNumber()
  OVERALL_SCORE?: number;
  @ApiPropertyOptional({ example: 90 })
  @IsOptional()
  @IsNumber()
  OVERALL_THRESHOLD?: number;
  @ApiPropertyOptional({ example: 'True' })
  @IsOptional()
  @IsString()
  OVERALL_PASSED?: string;
}

export class ExtIdInfoDto {
  @ApiProperty({ example: 'Pending' }) @IsString() ekycResultDoc!: string;

  @ApiProperty({ example: 1 }) @IsNumber() docEdition!: number;

  @ApiProperty({ description: 'base64 image string' })
  @IsString()
  frontPageImg!: string;
  @ApiProperty({ description: 'base64 image string' })
  @IsString()
  backPageImg!: string;

  @ApiPropertyOptional({
    description: 'Map of extra doc images',
    example: {
      DOC_FRONT_ANGLE: '...',
      CROPPED_FRONT: '...',
      CROPPED_BACK: '...',
    },
    type: 'object',
    additionalProperties: { type: 'string' },
  })
  @IsOptional()
  @IsObject()
  extraImages?: Record<string, string>;

  @ApiPropertyOptional({
    description: 'OCR results (simple key/value)',
    example: { ID_NUMBER: '12345', SEX: 'M' },
    type: 'object',
    additionalProperties: { type: 'string' },
  })
  @IsOptional()
  @IsObject()
  ocrResult?: Record<string, string>;

  @ApiPropertyOptional({
    description: 'OCR results (normalized keys)',
    example: { NUMBER: '12345', GENDER: 'M' },
    type: 'object',
    additionalProperties: { type: 'string' },
  })
  @IsOptional()
  @IsObject()
  ocrResultFormat?: Record<string, string>;

  @ApiPropertyOptional({
    description: 'OCR source-specific details',
    example: {
      MRZ_ID_NUMBER: { name: 'ID_NUMBER', source: 'MRZ', value: 'xxxx' },
      VISUAL_ID_NUMBER: { name: 'ID_NUMBER', source: 'VISUAL', value: 'xxxx' },
    },
    type: 'object',
    additionalProperties: {},
  })
  @IsOptional()
  @IsObject()
  ocrResultDetail?: Record<string, OcrDetailItemDto>;

  @ApiProperty({ example: 'CHN' }) @IsString() countryCode!: string;

  @ApiPropertyOptional({
    description: 'Five-category spoofing result flags (Y/N)',
    example: {
      TAMPER_CHECK: 'Y',
      MATERIAL_CHECK: 'Y',
      SCREEN_RECAPTURE_CHECK: 'Y',
      INFORMATION_CHECK: 'Y',
      SECURITY_FEATURE_CHECK: 'Y',
    },
    type: 'object',
    additionalProperties: { type: 'string' },
  })
  @IsOptional()
  @IsObject()
  spoofResult?: Record<string, string>;

  @ApiPropertyOptional({ type: [ExtraSpoofResultDetailDto] })
  @IsOptional()
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => ExtraSpoofResultDetailDto)
  extraSpoofResultDetails?: ExtraSpoofResultDetailDto[];

  @ApiPropertyOptional({ type: SecurityFeaturesResultDto })
  @IsOptional()
  @ValidateNested()
  @Type(() => SecurityFeaturesResultDto)
  securityFeaturesResult?: SecurityFeaturesResultDto;

  @ApiPropertyOptional({ example: 'BLUR' })
  @IsOptional()
  @IsString()
  docErrorDetails?: string;
  @ApiPropertyOptional({ example: 'passport country code check failed.' })
  @IsOptional()
  @IsString()
  docErrorDescription?: string;

  @ApiPropertyOptional({ example: 'N' })
  @IsOptional()
  @IsString()
  uploadEnabledResult?: string;

  @ApiPropertyOptional({ example: 'Pending' })
  @IsOptional()
  @IsString()
  deeperDocResult?: string;
  @ApiPropertyOptional({ example: 'deepfake risk' })
  @IsOptional()
  @IsString()
  deeperDocResultDescription?: string;
}

export class RiskDetailItemDto {
  @ApiProperty({
    isArray: true,
    type: String,
    example: ['AIN20240823437671943639'],
  })
  @IsArray()
  @IsString({ each: true })
  riskData!: string[];

  @ApiProperty({ example: 'SamePersonDifferentFace' })
  @IsString()
  subType!: string;
  @ApiProperty({ example: 'IDFAKE' }) @IsString() type!: string;
}

export class AdvancedIdnDetailDto {
  @ApiProperty({ example: 'AIN20240823437824356351' })
  @IsString()
  itemId!: string;

  @ApiProperty({ type: [RiskDetailItemDto] })
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => RiskDetailItemDto)
  riskDetails!: RiskDetailItemDto[];
}

export class BlackListDetailDto {
  @ApiProperty({ example: '10064' }) @IsString() listId!: string;
  @ApiProperty({ example: '95c0e4e55d5cd5485edaa573d15e82**' })
  @IsString()
  itemId!: string;
  @ApiProperty({ example: 'FACE' }) @IsString() itemType!: string;
  @ApiProperty({ example: 99.99 }) @IsNumber() similarScore!: number;
  @ApiPropertyOptional({ example: 'G000000001FRL202410100000000109481109**' })
  @IsOptional()
  @IsString()
  transactionId?: string;
}

export class ExtRiskInfoDto {
  @ApiProperty({ example: 'Pending' }) @IsString() ekycResultRisk!: string;
  @ApiProperty({ example: 'ID_NETWORK_HIGH_RISK' })
  @IsString()
  strategyPassResult!: string;

  @ApiProperty({ example: 'Success' }) @IsString() deeperRiskResult!: string;
  @ApiProperty({ example: '' })
  @IsString()
  deeperRiskResultDescription!: string;

  @ApiPropertyOptional({ type: AdvancedIdnDetailDto })
  @IsOptional()
  @ValidateNested()
  @Type(() => AdvancedIdnDetailDto)
  advancedIdnDetail?: AdvancedIdnDetailDto;

  @ApiPropertyOptional({ type: [BlackListDetailDto] })
  @IsOptional()
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => BlackListDetailDto)
  blackListDetails?: BlackListDetailDto[];
}

export class CheckResultResponseDto {
  @ApiProperty({ type: RealIdResultDto })
  @ValidateNested()
  @Type(() => RealIdResultDto)
  result!: RealIdResultDto;

  @ApiProperty({ example: 'Pending' }) @IsString() ekycResult!: string;

  @ApiProperty({ type: ExtBasicInfoDto })
  @ValidateNested()
  @Type(() => ExtBasicInfoDto)
  extBasicInfo!: ExtBasicInfoDto;

  @ApiProperty({ type: ExtFaceInfoDto })
  @ValidateNested()
  @Type(() => ExtFaceInfoDto)
  extFaceInfo!: ExtFaceInfoDto;

  @ApiProperty({ type: ExtIdInfoDto })
  @ValidateNested()
  @Type(() => ExtIdInfoDto)
  extIdInfo!: ExtIdInfoDto;

  @ApiProperty({ type: ExtRiskInfoDto })
  @ValidateNested()
  @Type(() => ExtRiskInfoDto)
  extRiskInfo!: ExtRiskInfoDto;

  @ApiPropertyOptional({ type: Object })
  @IsOptional()
  extCustomInfo?: Object;
}
